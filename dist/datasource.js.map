{"version":3,"sources":["../src/datasource.js"],"names":["_","ResponseParse","FileDatasource","instanceSettings","backendSrv","timeSrv","templateSrv","id","name","responseParser","options","queries","filter","targets","target","hide","map","rawQuery","query","defaultSql","refId","intervalMs","maxDataPoints","datasourceId","format","replace","variables","interpolateVar","length","Promise","resolve","data","datasourceRequest","url","from","range","valueOf","toString","to","method","then","processQueryResult","value","variable","multi","includeAll","quotedValues","encodeURI","val","join","response","status","message","title","catch","err","optionalOptions","interpolatedQuery","timeRange","parseMetricFindQueryResult","defSql"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport ResponseParse from './response_parser';\n\nexport default class FileDatasource {\n  constructor(instanceSettings, backendSrv, timeSrv, templateSrv) {\n    this.id = instanceSettings.id;\n    this.name = instanceSettings.name;\n    this.backendSrv = backendSrv;\n    this.timeSrv = timeSrv;\n    this.templateSrv = templateSrv;\n    this.responseParser = new ResponseParse();\n  }\n\n  query(options) {\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      const rawQuery = target.query || this.defaultSql();\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        format: target.format,\n        query: this.templateSrv.replace(rawQuery, this.templateSrv.variables, this.interpolateVar),\n      };\n    });\n\n    if (queries.length === 0) {\n      return Promise.resolve({\n        data: [],\n      });\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: `/api/tsdb/query`,\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: queries,\n      },\n      method: 'POST',\n    }).then(this.responseParser.processQueryResult);\n  }\n\n  interpolateVar(value, variable) {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return value.replace(/'/g, `''`);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _.map(value, val => {\n      if (typeof value === 'number') {\n        return value;\n      }\n      return encodeURI(val.replace(/'/g, `''`));\n    });\n\n    return quotedValues.join(',');\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: '5m',\n        to: 'now',\n        queries: [\n          {\n            refId: '[tests-connection]',\n            intervalMs: 1,\n            maxDataPoints: 1,\n            datasourceId: this.id,\n            format: 'table',\n            query: '',\n          }\n        ]\n      }\n    }).then((response) => {\n      if (response.status === 200) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' };\n      }\n    }).catch((err) => {\n      if (err.data && err.data.message) {\n        return { status: 'error', message: err.data.message };\n      } else {\n        return { status: 'error', message: err.data.status };\n      }\n    });\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      query: this.templateSrv.replace(query, this.templateSrv.variables, this.interpolateVar),\n      format: 'table',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: data,\n    }).then((data) => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  defaultSql() {\n    const defSql = 'SELECT * FROM {TableName} LIMIT 1, 15';\n    return defSql.replace('{TableName}', this.name);\n  }\n}\n"]}
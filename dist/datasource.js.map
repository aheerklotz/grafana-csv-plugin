{"version":3,"sources":["../src/datasource.js"],"names":["_","ResponseParse","FileDatasource","instanceSettings","backendSrv","timeSrv","id","name","responseParser","options","queries","filter","targets","target","hide","map","refId","intervalMs","maxDataPoints","datasourceId","format","query","defaultSql","length","Promise","resolve","data","datasourceRequest","url","from","range","valueOf","toString","to","method","then","processQueryResult","response","status","message","title","catch","err","optionalOptions","variable","interpolatedQuery","timeRange","parseMetricFindQueryResult","defSql","replace"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport ResponseParse from './response_parser';\n\nexport default class FileDatasource {\n  constructor(instanceSettings, backendSrv, timeSrv) {\n    this.id = instanceSettings.id;\n    this.name = instanceSettings.name;\n    this.backendSrv = backendSrv;\n    this.timeSrv = timeSrv;\n    this.responseParser = new ResponseParse();\n  }\n\n  query(options) {\n    // TODO: skip for filtering and process only first query\n    const queries = _.filter(options.targets, target => {\n      return target.hide !== true;\n    }).map(target => {\n      return {\n        refId: target.refId,\n        intervalMs: options.intervalMs,\n        maxDataPoints: options.maxDataPoints,\n        datasourceId: this.id,\n        format: target.format,\n        query: target.query || this.defaultSql(),\n      };\n    });\n\n    if (queries.length === 0) {\n      return Promise.resolve({\n        data: [],\n      });\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: `/api/tsdb/query`,\n      data: {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        // !!!!!!!!!!!!!!!!!!!!!!!!!\n        // Perform only first query\n        // !!!!!!!!!!!!!!!!!!!!!!!!!\n        queries: [queries[0]],\n      },\n      method: 'POST',\n    }).then(this.responseParser.processQueryResult);\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: '5m',\n        to: 'now',\n        queries: [\n          {\n            refId: '[tests-connection]',\n            intervalMs: 1,\n            maxDataPoints: 1,\n            datasourceId: this.id,\n            format: 'table',\n            query: '',\n          }\n        ]\n      }\n    }).then((response) => {\n      if (response.status === 200) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' };\n      }\n    }).catch((err) => {\n      if (err.data && err.data.message) {\n        return { status: 'error', message: err.data.message };\n      } else {\n        return { status: 'error', message: err.data.status };\n      }\n    });\n  }\n\n  metricFindQuery(query, optionalOptions) {\n    let refId = 'mqtmp';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n    const interpolatedQuery = {\n      refId: refId,\n      datasourceId: this.id,\n      format: 'table',\n      query: '',\n    };\n\n    const range = this.timeSrv.timeRange();\n    const data = {\n      queries: [interpolatedQuery],\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n    };\n\n    return this.backendSrv.datasourceRequest({\n        url: '/api/tsdb/query',\n        method: 'POST',\n        data: data,\n      })\n      .then((data) => this.responseParser.parseMetricFindQueryResult(refId, data));\n  }\n\n  defaultSql() {\n    const defSql = 'SELECT * FROM {TableName} LIMIT 1, 15';\n    return defSql.replace('{TableName}', this.name);\n  }\n}\n"]}
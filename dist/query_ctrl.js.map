{"version":3,"sources":["../src/query_ctrl.js"],"names":["_","QueryCtrl","PanelEvents","FileDatasourceQueryCtrl","$scope","$injector","target","alias","query","defaultSql","format","formats","text","value","panelCtrl","events","on","dataReceived","onDataReceived","bind","dataError","onDataError","defSql","replace","datasource","name","dataList","lastQueryMeta","lastQueryError","anySeriesFromQuery","find","refId","meta","err","data","results","queryRes","error","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAOA,O;;AACEC,e,kBAAAA,S;;AACAC,iB,gBAAAA,W;;;;;;;;;;;;;;;;;;;;;AAEYC,6B;;;AACnB,yCAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,wJACvBD,MADuB,EACfC,SADe;;AAG7B,gBAAKC,MAAL,CAAYC,KAAZ,GAAoB,EAApB;AACA,gBAAKD,MAAL,CAAYE,KAAZ,GAAoB,MAAKF,MAAL,CAAYE,KAAZ,IAAqB,MAAKC,UAAL,EAAzC;;AAEA;AACA,gBAAKH,MAAL,CAAYI,MAAZ,GAAqB,MAAKJ,MAAL,CAAYI,MAAZ,IAAsB,OAA3C;AACA,gBAAKC,OAAL,GAAe,CACb,EAAEC,MAAM,aAAR,EAAuBC,OAAO,aAA9B,EADa,EAEb,EAAED,MAAM,OAAR,EAAiBC,OAAO,OAAxB,EAFa,CAAf;;AAKA,gBAAKC,SAAL,CAAeC,MAAf,CAAsBC,EAAtB,CAAyBd,YAAYe,YAArC,EAAmD,MAAKC,cAAL,CAAoBC,IAApB,OAAnD,EAAmFf,MAAnF;AACA,gBAAKU,SAAL,CAAeC,MAAf,CAAsBC,EAAtB,CAAyBd,YAAYkB,SAArC,EAAgD,MAAKC,WAAL,CAAiBF,IAAjB,OAAhD,EAA6Ef,MAA7E;AAd6B;AAe9B;;;;uCAEY;AACX,gBAAMkB,SAAS,uCAAf;AACA,mBAAOA,OAAOC,OAAP,CAAe,aAAf,EAA8B,KAAKC,UAAL,CAAgBC,IAA9C,CAAP;AACD;;;yCAEcC,Q,EAAU;AACvB,iBAAKC,aAAL,GAAqB,IAArB;AACA,iBAAKC,cAAL,GAAsB,IAAtB;AACA,gBAAMC,qBAAqB7B,EAAE8B,IAAF,CAAOJ,QAAP,EAAiB,EAAEK,OAAO,KAAKzB,MAAL,CAAYyB,KAArB,EAAjB,CAA3B;AACA,gBAAIF,kBAAJ,EAAwB;AACtB,mBAAKF,aAAL,GAAqBE,mBAAmBG,IAAxC;AACD;AACF;;;sCAEWC,G,EAAK;AACf,gBAAIA,IAAIC,IAAJ,IAAYD,IAAIC,IAAJ,CAASC,OAAzB,EAAkC;AAChC,kBAAMC,WAAWH,IAAIC,IAAJ,CAASC,OAAT,CAAiB,KAAK7B,MAAL,CAAYyB,KAA7B,CAAjB;AACA,kBAAIK,QAAJ,EAAc;AACZ,qBAAKT,aAAL,GAAqBS,SAASJ,IAA9B;AACA,qBAAKJ,cAAL,GAAsBQ,SAASC,KAA/B;AACD;AACF;AACF;;;;QAxCkDpC,S;;yBAAhCE,uB;;AA2CrBA,8BAAwBmC,WAAxB,GAAsC,4BAAtC","file":"query_ctrl.js","sourcesContent":["import _ from 'lodash';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { PanelEvents } from '@grafana/data';\n\nexport default class FileDatasourceQueryCtrl extends QueryCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    this.target.alias = '';\n    this.target.query = this.target.query || this.defaultSql();\n\n    // FORMAT\n    this.target.format = this.target.format || 'table';\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  defaultSql() {\n    const defSql = 'SELECT * FROM {TableName} LIMIT 1, 15';\n    return defSql.replace('{TableName}', this.datasource.name);\n  }\n\n  onDataReceived(dataList) {\n    this.lastQueryMeta = null;\n    this.lastQueryError = null;\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\n    if (anySeriesFromQuery) {\n      this.lastQueryMeta = anySeriesFromQuery.meta;\n    }\n  }\n\n  onDataError(err) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryMeta = queryRes.meta;\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n}\n\nFileDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}